definitions:
  github_com_JMURv_golang-clean-template_internal_dto.CheckEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  github_com_JMURv_golang-clean-template_internal_dto.CreateUserResponse:
    properties:
      id:
        type: string
    type: object
  github_com_JMURv_golang-clean-template_internal_dto.EmailAndPasswordRequest:
    properties:
      email:
        type: string
      password:
        type: string
      token:
        type: string
    required:
    - email
    - password
    - token
    type: object
  github_com_JMURv_golang-clean-template_internal_dto.ExistsUserResponse:
    properties:
      exists:
        type: boolean
    type: object
  github_com_JMURv_golang-clean-template_internal_dto.PaginatedUserResponse:
    properties:
      count:
        type: integer
      currentPage:
        type: integer
      data:
        items:
          $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_models.User'
        type: array
      hasNextPage:
        type: boolean
      totalPages:
        type: integer
    type: object
  github_com_JMURv_golang-clean-template_internal_dto.UpdateDeviceRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse:
    properties:
      errors:
        items:
          type: string
        type: array
    type: object
  github_com_JMURv_golang-clean-template_internal_models.Device:
    properties:
      browser:
        type: string
      createdAt:
        type: string
      deviceType:
        type: string
      id:
        type: string
      ip:
        type: string
      lastActive:
        type: string
      name:
        type: string
      os:
        type: string
      ua:
        type: string
      userId:
        type: string
    type: object
  github_com_JMURv_golang-clean-template_internal_models.User:
    properties:
      avatar:
        type: string
      createdAt:
        type: string
      devices:
        items:
          $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_models.Device'
        type: array
      email:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      isEmailVerified:
        type: boolean
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/jwt:
    post:
      consumes:
      - application/json
      description: Verify reCAPTCHA, then authenticate and set JWT cookies
      parameters:
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      - description: Login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_dto.EmailAndPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully authenticated (sets cookies)
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Authenticate using email & password
      tags:
      - Authentication
  /auth/jwt/refresh:
    post:
      consumes:
      - application/json
      description: Validate refresh token from cookie and issue new tokens
      parameters:
      - description: Client real IP address
        in: header
        name: X-Real-IP
        required: true
        type: string
      - description: Client User-Agent
        in: header
        name: User-Agent
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully refreshed tokens (sets cookies)
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Refresh JWT tokens
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Revoke refresh token, clear JWT cookies
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Revoked refresh token, cleared cookies
        "404":
          description: session not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Logout user
      tags:
      - Authentication
  /device:
    get:
      description: Retrieve a list of registered devices for the current user
      parameters:
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_models.Device'
              type: array
            type: array
        "404":
          description: no devices found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: List all devices for the authenticated user
      tags:
      - Device
  /device/{id}:
    delete:
      description: Remove a device owned by the current user
      parameters:
      - description: Device UUID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: invalid device ID
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: device not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Delete a device
      tags:
      - Device
    get:
      description: Retrieve details of a device owned by the current user
      parameters:
      - description: Device UUID
        in: path
        name: id
        required: true
        type: string
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_models.Device'
        "400":
          description: invalid device ID path parameter
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: device not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Get a specific device by ID
      tags:
      - Device
    put:
      consumes:
      - application/json
      description: Modify properties of a device owned by the current user
      parameters:
      - description: Device UUID
        in: path
        name: id
        required: true
        type: string
      - description: Update payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_dto.UpdateDeviceRequest'
      - description: Authorization token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid device ID or payload
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: device not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Update a device
      tags:
      - Device
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of users with optional filters
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_dto.PaginatedUserResponse'
            type: array
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: List all users
      tags:
      - User
    post:
      consumes:
      - multipart/form-data
      description: Creates a user with optional avatar upload
      parameters:
      - description: JSON payload in 'data' field
        in: formData
        name: data
        required: true
        type: string
      - description: Avatar image file
        in: formData
        name: avatar
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_dto.CreateUserResponse'
        "400":
          description: bad request or file too large
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "409":
          description: user already exists
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Create a new user
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Removes a user by UUID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: Bearer token, e.g. 'Bearer {jwt}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Delete a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Retrieve a user by their UUID
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_models.User'
        "400":
          description: invalid UUID
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Get user by ID
      tags:
      - User
    put:
      consumes:
      - multipart/form-data
      description: Updates user profile and avatar
      parameters:
      - description: User UUID
        in: path
        name: id
        required: true
        type: string
      - description: JSON payload in 'data' field
        in: formData
        name: data
        required: true
        type: string
      - description: Avatar image file
        in: formData
        name: avatar
        type: file
      - description: Bearer token, e.g. 'Bearer {jwt}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Update an existing user
      tags:
      - User
  /users/exists:
    post:
      consumes:
      - application/json
      description: Returns 200 if user exists, 404 otherwise
      parameters:
      - description: Email payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_dto.CheckEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_dto.ExistsUserResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Check if a user exists by email
      tags:
      - User
  /users/me:
    get:
      description: Returns the authenticated user's profile
      parameters:
      - description: Bearer token, e.g. 'Bearer {jwt}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_models.User'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "404":
          description: user not found
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
        "500":
          description: internal error
          schema:
            $ref: '#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse'
      summary: Retrieve current user profile
      tags:
      - User
swagger: "2.0"
