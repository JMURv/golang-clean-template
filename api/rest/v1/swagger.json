{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/jwt": {
            "post": {
                "description": "Verify reCAPTCHA, then authenticate and set JWT cookies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Authenticate using email \u0026 password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Login credentials",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_dto.EmailAndPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated (sets cookies)"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/jwt/refresh": {
            "post": {
                "description": "Validate refresh token from cookie and issue new tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Client real IP address",
                        "name": "X-Real-IP",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Client User-Agent",
                        "name": "User-Agent",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully refreshed tokens (sets cookies)"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "description": "Revoke refresh token, clear JWT cookies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Revoked refresh token, cleared cookies"
                    },
                    "404": {
                        "description": "session not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/device": {
            "get": {
                "description": "Retrieve a list of registered devices for the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "List all devices for the authenticated user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_models.Device"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "no devices found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/device/{id}": {
            "get": {
                "description": "Retrieve details of a device owned by the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Get a specific device by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_models.Device"
                        }
                    },
                    "400": {
                        "description": "invalid device ID path parameter",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "device not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Modify properties of a device owned by the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Update a device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_dto.UpdateDeviceRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "invalid device ID or payload",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "device not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove a device owned by the current user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Delete a device",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Authorization token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "invalid device ID",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "device not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieve a paginated list of users with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List all users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_dto.PaginatedUserResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a user with optional avatar upload",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JSON payload in 'data' field",
                        "name": "data",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_dto.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "bad request or file too large",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "409": {
                        "description": "user already exists",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/users/exists": {
            "post": {
                "description": "Returns 200 if user exists, 404 otherwise",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Check if a user exists by email",
                "parameters": [
                    {
                        "description": "Email payload",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_dto.CheckEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_dto.ExistsUserResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "description": "Returns the authenticated user's profile",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Retrieve current user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token, e.g. 'Bearer {jwt}'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_models.User"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve a user by their UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_models.User"
                        }
                    },
                    "400": {
                        "description": "invalid UUID",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates user profile and avatar",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update an existing user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "JSON payload in 'data' field",
                        "name": "data",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file",
                        "name": "avatar",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Bearer token, e.g. 'Bearer {jwt}'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Removes a user by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token, e.g. 'Bearer {jwt}'",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "404": {
                        "description": "user not found",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    },
                    "500": {
                        "description": "internal error",
                        "schema": {
                            "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_JMURv_golang-clean-template_internal_dto.CheckEmailRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_dto.CreateUserResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_dto.EmailAndPasswordRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "token"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_dto.ExistsUserResponse": {
            "type": "object",
            "properties": {
                "exists": {
                    "type": "boolean"
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_dto.PaginatedUserResponse": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "currentPage": {
                    "type": "integer"
                },
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_models.User"
                    }
                },
                "hasNextPage": {
                    "type": "boolean"
                },
                "totalPages": {
                    "type": "integer"
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_dto.UpdateDeviceRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_hdl_http_utils.ErrorsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_models.Device": {
            "type": "object",
            "properties": {
                "browser": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deviceType": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "lastActive": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "ua": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "github_com_JMURv_golang-clean-template_internal_models.User": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_JMURv_golang-clean-template_internal_models.Device"
                    }
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "isEmailVerified": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        }
    }
}