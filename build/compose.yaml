name: app-template-prod
services:
  redis:
    container_name: redis
    restart: always
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks: [ app-template-prod ]

  db:
    container_name: db
    image: postgres:17.4-alpine
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: 'psql -w -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h localhost -c "SELECT 1"'
      interval: 5s
      timeout: 2s
      retries: 5
      start_period: 2s
    volumes:
      - pg_data_prod:/var/lib/postgresql/data
    networks: [ app-template-prod ]

  minio:
    image: minio/minio:RELEASE.2025-06-13T11-33-47Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
    volumes:
      - minio_data_prod:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 2s
    networks: [ app-template-prod ]

  backend:
    container_name: backend
    restart: unless-stopped
    image: app-template-backend:latest
    build:
      context: ../
      dockerfile: ./build/docker/Dockerfile
    env_file:
      - ./configs/envs/.env.prod
    ports:
      - "${SERVER_HTTP_PORT}:${SERVER_HTTP_PORT}"
      - "${SERVER_GRPC_PORT}:${SERVER_GRPC_PORT}"
      - "${SERVER_PROM_PORT}:${SERVER_PROM_PORT}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${SERVER_HTTP_PORT}/health" ]
      interval: 5s
      timeout: 5s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
        restart: true
      minio:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started
    networks: [ app-template-prod ]
    develop:
      watch:
        - action: rebuild
          target: /
          path: backend
          ignore:
            - .git
            - vendor

  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    profiles: ["observe"]
    ports:
      - "14268:14268"
      - "16686:16686"
      - "6831:6831/udp"
    networks: [ app-template-prod ]

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    profiles: ["observe"]
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks: [ app-template-prod ]

  node-exp:
    container_name: node-exp
    image: prom/node-exporter
    restart: unless-stopped
    profiles: ["observe"]
    ports:
      - "9100:9100"
    networks: [ app-template-prod ]

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    profiles: ["observe"]
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks: [ app-template-prod ]

  loki:
    container_name: loki
    image: grafana/loki:latest
    restart: unless-stopped
    profiles: ["observe"]
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    volumes:
      - loki_data:/loki
      - ./configs/loki:/etc/loki
    networks: [ app-template-prod ]

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    restart: unless-stopped
    profiles: ["observe"]
    volumes:
      - ./configs/promtail:/etc/promtail
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    depends_on:
      - loki
    networks: [ app-template-prod ]

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    profiles: ["observe"]
    environment:
      DATA_SOURCE_NAME: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      db:
        condition: service_healthy
    networks: [ app-template-prod ]

  redis-exporter:
    image: oliver006/redis_exporter:v1.43.0
    profiles: ["observe"]
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_started
    networks: [ app-template-prod ]


volumes:
  pg_data_prod:
  minio_data_prod:
  redis_data_prod:
  prometheus_data_prod:
  grafana_data_prod:
  loki_data_prod:

networks:
  app-template-prod:
    name: app-template-prod
