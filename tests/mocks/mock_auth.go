// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/auth/auth.go
//
// Generated by this command:
//
//	mockgen -source=./internal/auth/auth.go -destination=tests/mocks/mock_auth.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	captcha "github.com/JMURv/golang-clean-template/internal/auth/captcha"
	jwt "github.com/JMURv/golang-clean-template/internal/auth/jwt"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCore is a mock of Core interface.
type MockCore struct {
	ctrl     *gomock.Controller
	recorder *MockCoreMockRecorder
	isgomock struct{}
}

// MockCoreMockRecorder is the mock recorder for MockCore.
type MockCoreMockRecorder struct {
	mock *MockCore
}

// NewMockCore creates a new mock instance.
func NewMockCore(ctrl *gomock.Controller) *MockCore {
	mock := &MockCore{ctrl: ctrl}
	mock.recorder = &MockCoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCore) EXPECT() *MockCoreMockRecorder {
	return m.recorder
}

// ComparePasswords mocks base method.
func (m *MockCore) ComparePasswords(hashed, pswd []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePasswords", hashed, pswd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePasswords indicates an expected call of ComparePasswords.
func (mr *MockCoreMockRecorder) ComparePasswords(hashed, pswd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePasswords", reflect.TypeOf((*MockCore)(nil).ComparePasswords), hashed, pswd)
}

// GenPair mocks base method.
func (m *MockCore) GenPair(ctx context.Context, uid uuid.UUID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenPair", ctx, uid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenPair indicates an expected call of GenPair.
func (mr *MockCoreMockRecorder) GenPair(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenPair", reflect.TypeOf((*MockCore)(nil).GenPair), ctx, uid)
}

// GetAccessTime mocks base method.
func (m *MockCore) GetAccessTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetAccessTime indicates an expected call of GetAccessTime.
func (mr *MockCoreMockRecorder) GetAccessTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessTime", reflect.TypeOf((*MockCore)(nil).GetAccessTime))
}

// GetRefreshTime mocks base method.
func (m *MockCore) GetRefreshTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetRefreshTime indicates an expected call of GetRefreshTime.
func (mr *MockCoreMockRecorder) GetRefreshTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTime", reflect.TypeOf((*MockCore)(nil).GetRefreshTime))
}

// Hash mocks base method.
func (m *MockCore) Hash(pswd string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", pswd)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockCoreMockRecorder) Hash(pswd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockCore)(nil).Hash), pswd)
}

// NewToken mocks base method.
func (m *MockCore) NewToken(ctx context.Context, uid uuid.UUID, d time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", ctx, uid, d)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockCoreMockRecorder) NewToken(ctx, uid, d any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockCore)(nil).NewToken), ctx, uid, d)
}

// ParseClaims mocks base method.
func (m *MockCore) ParseClaims(ctx context.Context, tokenStr string) (jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseClaims", ctx, tokenStr)
	ret0, _ := ret[0].(jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseClaims indicates an expected call of ParseClaims.
func (mr *MockCoreMockRecorder) ParseClaims(ctx, tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseClaims", reflect.TypeOf((*MockCore)(nil).ParseClaims), ctx, tokenStr)
}

// VerifyRecaptcha mocks base method.
func (m *MockCore) VerifyRecaptcha(token string, action captcha.Actions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRecaptcha", token, action)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRecaptcha indicates an expected call of VerifyRecaptcha.
func (mr *MockCoreMockRecorder) VerifyRecaptcha(token, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRecaptcha", reflect.TypeOf((*MockCore)(nil).VerifyRecaptcha), token, action)
}
